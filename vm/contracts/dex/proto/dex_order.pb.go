// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.6.1
// source: dex_order.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//storage
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"` //[unset on serialize] MarketId[0..2]Side[3]Price[4..13]timestamp[14..18]serialNo[19..21] = 21
	Address                 []byte `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	MarketId                int32  `protobuf:"varint,3,opt,name=MarketId,proto3" json:"MarketId,omitempty"`                          // [unset on serialize]
	Side                    bool   `protobuf:"varint,4,opt,name=Side,proto3" json:"Side,omitempty"`                                  // //[unset on serialize] false buy, true sell
	Type                    int32  `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`                                  // 0 limit order, 1 market order
	Price                   []byte `protobuf:"bytes,6,opt,name=Price,proto3" json:"Price,omitempty"`                                 // //[unset on serialize] [0...4]intPart [5..9]decimalPart
	TakerFeeRate            int32  `protobuf:"varint,7,opt,name=TakerFeeRate,proto3" json:"TakerFeeRate,omitempty"`                  // rate/100,000
	MakerFeeRate            int32  `protobuf:"varint,8,opt,name=MakerFeeRate,proto3" json:"MakerFeeRate,omitempty"`                  // rate/100,000
	TakerOperatorFeeRate    int32  `protobuf:"varint,9,opt,name=TakerOperatorFeeRate,proto3" json:"TakerOperatorFeeRate,omitempty"`  // rate/100,000
	MakerOperatorFeeRate    int32  `protobuf:"varint,10,opt,name=MakerOperatorFeeRate,proto3" json:"MakerOperatorFeeRate,omitempty"` // rate/100,000
	Quantity                []byte `protobuf:"bytes,11,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Amount                  []byte `protobuf:"bytes,12,opt,name=Amount,proto3" json:"Amount,omitempty"`             // QuoteAmount
	LockedBuyFee            []byte `protobuf:"bytes,13,opt,name=LockedBuyFee,proto3" json:"LockedBuyFee,omitempty"` // fee locked ahead for buy (Fee + OperatorFee)
	Status                  int32  `protobuf:"varint,14,opt,name=Status,proto3" json:"Status,omitempty"`
	CancelReason            int32  `protobuf:"varint,15,opt,name=CancelReason,proto3" json:"CancelReason,omitempty"`
	ExecutedQuantity        []byte `protobuf:"bytes,16,opt,name=ExecutedQuantity,proto3" json:"ExecutedQuantity,omitempty"`
	ExecutedAmount          []byte `protobuf:"bytes,17,opt,name=ExecutedAmount,proto3" json:"ExecutedAmount,omitempty"`
	ExecutedBaseFee         []byte `protobuf:"bytes,18,opt,name=ExecutedBaseFee,proto3" json:"ExecutedBaseFee,omitempty"` // fee actually executed
	ExecutedOperatorFee     []byte `protobuf:"bytes,19,opt,name=ExecutedOperatorFee,proto3" json:"ExecutedOperatorFee,omitempty"`
	RefundToken             []byte `protobuf:"bytes,20,opt,name=RefundToken,proto3" json:"RefundToken,omitempty"`
	RefundQuantity          []byte `protobuf:"bytes,21,opt,name=RefundQuantity,proto3" json:"RefundQuantity,omitempty"` //refund trade/quote token
	Timestamp               int64  `protobuf:"varint,22,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`          // [unset on serialize]
	Agent                   []byte `protobuf:"bytes,23,opt,name=Agent,proto3" json:"Agent,omitempty"`
	SendHash                []byte `protobuf:"bytes,24,opt,name=SendHash,proto3" json:"SendHash,omitempty"`
	MarketOrderAmtThreshold []byte `protobuf:"bytes,25,opt,name=MarketOrderAmtThreshold,proto3" json:"MarketOrderAmtThreshold,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Order) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Order) GetMarketId() int32 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *Order) GetSide() bool {
	if x != nil {
		return x.Side
	}
	return false
}

func (x *Order) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Order) GetPrice() []byte {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Order) GetTakerFeeRate() int32 {
	if x != nil {
		return x.TakerFeeRate
	}
	return 0
}

func (x *Order) GetMakerFeeRate() int32 {
	if x != nil {
		return x.MakerFeeRate
	}
	return 0
}

func (x *Order) GetTakerOperatorFeeRate() int32 {
	if x != nil {
		return x.TakerOperatorFeeRate
	}
	return 0
}

func (x *Order) GetMakerOperatorFeeRate() int32 {
	if x != nil {
		return x.MakerOperatorFeeRate
	}
	return 0
}

func (x *Order) GetQuantity() []byte {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Order) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Order) GetLockedBuyFee() []byte {
	if x != nil {
		return x.LockedBuyFee
	}
	return nil
}

func (x *Order) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Order) GetCancelReason() int32 {
	if x != nil {
		return x.CancelReason
	}
	return 0
}

func (x *Order) GetExecutedQuantity() []byte {
	if x != nil {
		return x.ExecutedQuantity
	}
	return nil
}

func (x *Order) GetExecutedAmount() []byte {
	if x != nil {
		return x.ExecutedAmount
	}
	return nil
}

func (x *Order) GetExecutedBaseFee() []byte {
	if x != nil {
		return x.ExecutedBaseFee
	}
	return nil
}

func (x *Order) GetExecutedOperatorFee() []byte {
	if x != nil {
		return x.ExecutedOperatorFee
	}
	return nil
}

func (x *Order) GetRefundToken() []byte {
	if x != nil {
		return x.RefundToken
	}
	return nil
}

func (x *Order) GetRefundQuantity() []byte {
	if x != nil {
		return x.RefundQuantity
	}
	return nil
}

func (x *Order) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Order) GetAgent() []byte {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Order) GetSendHash() []byte {
	if x != nil {
		return x.SendHash
	}
	return nil
}

func (x *Order) GetMarketOrderAmtThreshold() []byte {
	if x != nil {
		return x.MarketOrderAmtThreshold
	}
	return nil
}

//storage
type SerialNo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No        int32 `protobuf:"varint,1,opt,name=No,proto3" json:"No,omitempty"`
	Timestamp int64 `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *SerialNo) Reset() {
	*x = SerialNo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialNo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialNo) ProtoMessage() {}

func (x *SerialNo) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialNo.ProtoReflect.Descriptor instead.
func (*SerialNo) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{1}
}

func (x *SerialNo) GetNo() int32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *SerialNo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TakerSide        bool   `protobuf:"varint,2,opt,name=TakerSide,proto3" json:"TakerSide,omitempty"`
	TakerId          []byte `protobuf:"bytes,3,opt,name=TakerId,proto3" json:"TakerId,omitempty"`
	MakerId          []byte `protobuf:"bytes,4,opt,name=MakerId,proto3" json:"MakerId,omitempty"`
	Price            []byte `protobuf:"bytes,5,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity         []byte `protobuf:"bytes,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Amount           []byte `protobuf:"bytes,7,opt,name=Amount,proto3" json:"Amount,omitempty"`
	TakerFee         []byte `protobuf:"bytes,8,opt,name=TakerFee,proto3" json:"TakerFee,omitempty"`
	MakerFee         []byte `protobuf:"bytes,9,opt,name=MakerFee,proto3" json:"MakerFee,omitempty"`
	TakerOperatorFee []byte `protobuf:"bytes,10,opt,name=TakerOperatorFee,proto3" json:"TakerOperatorFee,omitempty"`
	MakerOperatorFee []byte `protobuf:"bytes,11,opt,name=MakerOperatorFee,proto3" json:"MakerOperatorFee,omitempty"`
	Timestamp        int64  `protobuf:"varint,12,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Transaction) GetTakerSide() bool {
	if x != nil {
		return x.TakerSide
	}
	return false
}

func (x *Transaction) GetTakerId() []byte {
	if x != nil {
		return x.TakerId
	}
	return nil
}

func (x *Transaction) GetMakerId() []byte {
	if x != nil {
		return x.MakerId
	}
	return nil
}

func (x *Transaction) GetPrice() []byte {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Transaction) GetQuantity() []byte {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *Transaction) GetAmount() []byte {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Transaction) GetTakerFee() []byte {
	if x != nil {
		return x.TakerFee
	}
	return nil
}

func (x *Transaction) GetMakerFee() []byte {
	if x != nil {
		return x.MakerFee
	}
	return nil
}

func (x *Transaction) GetTakerOperatorFee() []byte {
	if x != nil {
		return x.TakerOperatorFee
	}
	return nil
}

func (x *Transaction) GetMakerOperatorFee() []byte {
	if x != nil {
		return x.MakerOperatorFee
	}
	return nil
}

func (x *Transaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

//storage+event
type TokenInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId        []byte `protobuf:"bytes,1,opt,name=TokenId,proto3" json:"TokenId,omitempty"`
	Decimals       int32  `protobuf:"varint,2,opt,name=Decimals,proto3" json:"Decimals,omitempty"`
	Symbol         string `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Index          int32  `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
	Owner          []byte `protobuf:"bytes,5,opt,name=Owner,proto3" json:"Owner,omitempty"`
	QuoteTokenType int32  `protobuf:"varint,6,opt,name=QuoteTokenType,proto3" json:"QuoteTokenType,omitempty"` // 1 vite 2 eth 3 btc 4 usdt
}

func (x *TokenInfo) Reset() {
	*x = TokenInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenInfo) ProtoMessage() {}

func (x *TokenInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenInfo.ProtoReflect.Descriptor instead.
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{3}
}

func (x *TokenInfo) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *TokenInfo) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TokenInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TokenInfo) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *TokenInfo) GetQuoteTokenType() int32 {
	if x != nil {
		return x.QuoteTokenType
	}
	return 0
}

//storage+event
type MarketInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId             int32  `protobuf:"varint,1,opt,name=MarketId,proto3" json:"MarketId,omitempty"`
	MarketSymbol         string `protobuf:"bytes,2,opt,name=MarketSymbol,proto3" json:"MarketSymbol,omitempty"`
	TradeToken           []byte `protobuf:"bytes,3,opt,name=TradeToken,proto3" json:"TradeToken,omitempty"`
	QuoteToken           []byte `protobuf:"bytes,4,opt,name=QuoteToken,proto3" json:"QuoteToken,omitempty"`
	QuoteTokenType       int32  `protobuf:"varint,5,opt,name=QuoteTokenType,proto3" json:"QuoteTokenType,omitempty"`
	TradeTokenDecimals   int32  `protobuf:"varint,6,opt,name=TradeTokenDecimals,proto3" json:"TradeTokenDecimals,omitempty"`
	QuoteTokenDecimals   int32  `protobuf:"varint,7,opt,name=QuoteTokenDecimals,proto3" json:"QuoteTokenDecimals,omitempty"`
	TakerOperatorFeeRate int32  `protobuf:"varint,8,opt,name=TakerOperatorFeeRate,proto3" json:"TakerOperatorFeeRate,omitempty"` // rate/100,000
	MakerOperatorFeeRate int32  `protobuf:"varint,9,opt,name=MakerOperatorFeeRate,proto3" json:"MakerOperatorFeeRate,omitempty"` // rate/100,000
	AllowMining          bool   `protobuf:"varint,10,opt,name=AllowMining,proto3" json:"AllowMining,omitempty"`
	Valid                bool   `protobuf:"varint,11,opt,name=Valid,proto3" json:"Valid,omitempty"` // false: pending for tradeToken validate
	Owner                []byte `protobuf:"bytes,12,opt,name=Owner,proto3" json:"Owner,omitempty"`
	Creator              []byte `protobuf:"bytes,13,opt,name=Creator,proto3" json:"Creator,omitempty"` //creator address
	Stopped              bool   `protobuf:"varint,14,opt,name=Stopped,proto3" json:"Stopped,omitempty"`
	Timestamp            int64  `protobuf:"varint,15,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	StableMarket         bool   `protobuf:"varint,16,opt,name=StableMarket,proto3" json:"StableMarket,omitempty"`
}

func (x *MarketInfo) Reset() {
	*x = MarketInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketInfo) ProtoMessage() {}

func (x *MarketInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketInfo.ProtoReflect.Descriptor instead.
func (*MarketInfo) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{4}
}

func (x *MarketInfo) GetMarketId() int32 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *MarketInfo) GetMarketSymbol() string {
	if x != nil {
		return x.MarketSymbol
	}
	return ""
}

func (x *MarketInfo) GetTradeToken() []byte {
	if x != nil {
		return x.TradeToken
	}
	return nil
}

func (x *MarketInfo) GetQuoteToken() []byte {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *MarketInfo) GetQuoteTokenType() int32 {
	if x != nil {
		return x.QuoteTokenType
	}
	return 0
}

func (x *MarketInfo) GetTradeTokenDecimals() int32 {
	if x != nil {
		return x.TradeTokenDecimals
	}
	return 0
}

func (x *MarketInfo) GetQuoteTokenDecimals() int32 {
	if x != nil {
		return x.QuoteTokenDecimals
	}
	return 0
}

func (x *MarketInfo) GetTakerOperatorFeeRate() int32 {
	if x != nil {
		return x.TakerOperatorFeeRate
	}
	return 0
}

func (x *MarketInfo) GetMakerOperatorFeeRate() int32 {
	if x != nil {
		return x.MakerOperatorFeeRate
	}
	return 0
}

func (x *MarketInfo) GetAllowMining() bool {
	if x != nil {
		return x.AllowMining
	}
	return false
}

func (x *MarketInfo) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *MarketInfo) GetOwner() []byte {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *MarketInfo) GetCreator() []byte {
	if x != nil {
		return x.Creator
	}
	return nil
}

func (x *MarketInfo) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *MarketInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MarketInfo) GetStableMarket() bool {
	if x != nil {
		return x.StableMarket
	}
	return false
}

//event
type NewOrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order      *Order `protobuf:"bytes,1,opt,name=Order,proto3" json:"Order,omitempty"`
	TradeToken []byte `protobuf:"bytes,2,opt,name=TradeToken,proto3" json:"TradeToken,omitempty"`
	QuoteToken []byte `protobuf:"bytes,3,opt,name=QuoteToken,proto3" json:"QuoteToken,omitempty"`
}

func (x *NewOrderInfo) Reset() {
	*x = NewOrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderInfo) ProtoMessage() {}

func (x *NewOrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderInfo.ProtoReflect.Descriptor instead.
func (*NewOrderInfo) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{5}
}

func (x *NewOrderInfo) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

func (x *NewOrderInfo) GetTradeToken() []byte {
	if x != nil {
		return x.TradeToken
	}
	return nil
}

func (x *NewOrderInfo) GetQuoteToken() []byte {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

//event
type OrderUpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	TradeToken          []byte `protobuf:"bytes,2,opt,name=TradeToken,proto3" json:"TradeToken,omitempty"`
	QuoteToken          []byte `protobuf:"bytes,3,opt,name=QuoteToken,proto3" json:"QuoteToken,omitempty"`
	Status              int32  `protobuf:"varint,4,opt,name=Status,proto3" json:"Status,omitempty"`
	CancelReason        int32  `protobuf:"varint,5,opt,name=CancelReason,proto3" json:"CancelReason,omitempty"`
	ExecutedQuantity    []byte `protobuf:"bytes,6,opt,name=ExecutedQuantity,proto3" json:"ExecutedQuantity,omitempty"`
	ExecutedAmount      []byte `protobuf:"bytes,7,opt,name=ExecutedAmount,proto3" json:"ExecutedAmount,omitempty"`
	ExecutedBaseFee     []byte `protobuf:"bytes,8,opt,name=ExecutedBaseFee,proto3" json:"ExecutedBaseFee,omitempty"`
	ExecutedOperatorFee []byte `protobuf:"bytes,9,opt,name=ExecutedOperatorFee,proto3" json:"ExecutedOperatorFee,omitempty"`
	RefundToken         []byte `protobuf:"bytes,10,opt,name=RefundToken,proto3" json:"RefundToken,omitempty"`
	RefundQuantity      []byte `protobuf:"bytes,11,opt,name=RefundQuantity,proto3" json:"RefundQuantity,omitempty"` //refund trade/quote token
}

func (x *OrderUpdateInfo) Reset() {
	*x = OrderUpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdateInfo) ProtoMessage() {}

func (x *OrderUpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdateInfo.ProtoReflect.Descriptor instead.
func (*OrderUpdateInfo) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{6}
}

func (x *OrderUpdateInfo) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *OrderUpdateInfo) GetTradeToken() []byte {
	if x != nil {
		return x.TradeToken
	}
	return nil
}

func (x *OrderUpdateInfo) GetQuoteToken() []byte {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *OrderUpdateInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OrderUpdateInfo) GetCancelReason() int32 {
	if x != nil {
		return x.CancelReason
	}
	return 0
}

func (x *OrderUpdateInfo) GetExecutedQuantity() []byte {
	if x != nil {
		return x.ExecutedQuantity
	}
	return nil
}

func (x *OrderUpdateInfo) GetExecutedAmount() []byte {
	if x != nil {
		return x.ExecutedAmount
	}
	return nil
}

func (x *OrderUpdateInfo) GetExecutedBaseFee() []byte {
	if x != nil {
		return x.ExecutedBaseFee
	}
	return nil
}

func (x *OrderUpdateInfo) GetExecutedOperatorFee() []byte {
	if x != nil {
		return x.ExecutedOperatorFee
	}
	return nil
}

func (x *OrderUpdateInfo) GetRefundToken() []byte {
	if x != nil {
		return x.RefundToken
	}
	return nil
}

func (x *OrderUpdateInfo) GetRefundQuantity() []byte {
	if x != nil {
		return x.RefundQuantity
	}
	return nil
}

type NewMarketAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeToken  []byte   `protobuf:"bytes,1,opt,name=TradeToken,proto3" json:"TradeToken,omitempty"`
	QuoteTokens [][]byte `protobuf:"bytes,2,rep,name=QuoteTokens,proto3" json:"QuoteTokens,omitempty"`
}

func (x *NewMarketAction) Reset() {
	*x = NewMarketAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewMarketAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMarketAction) ProtoMessage() {}

func (x *NewMarketAction) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMarketAction.ProtoReflect.Descriptor instead.
func (*NewMarketAction) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{7}
}

func (x *NewMarketAction) GetTradeToken() []byte {
	if x != nil {
		return x.TradeToken
	}
	return nil
}

func (x *NewMarketAction) GetQuoteTokens() [][]byte {
	if x != nil {
		return x.QuoteTokens
	}
	return nil
}

type PendingNewMarkets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingActions []*NewMarketAction `protobuf:"bytes,1,rep,name=PendingActions,proto3" json:"PendingActions,omitempty"`
}

func (x *PendingNewMarkets) Reset() {
	*x = PendingNewMarkets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingNewMarkets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingNewMarkets) ProtoMessage() {}

func (x *PendingNewMarkets) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingNewMarkets.ProtoReflect.Descriptor instead.
func (*PendingNewMarkets) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{8}
}

func (x *PendingNewMarkets) GetPendingActions() []*NewMarketAction {
	if x != nil {
		return x.PendingActions
	}
	return nil
}

type SetQuoteTokenAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token          []byte `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
	QuoteTokenType int32  `protobuf:"varint,2,opt,name=QuoteTokenType,proto3" json:"QuoteTokenType,omitempty"`
}

func (x *SetQuoteTokenAction) Reset() {
	*x = SetQuoteTokenAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetQuoteTokenAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQuoteTokenAction) ProtoMessage() {}

func (x *SetQuoteTokenAction) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQuoteTokenAction.ProtoReflect.Descriptor instead.
func (*SetQuoteTokenAction) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{9}
}

func (x *SetQuoteTokenAction) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *SetQuoteTokenAction) GetQuoteTokenType() int32 {
	if x != nil {
		return x.QuoteTokenType
	}
	return 0
}

type PendingSetQuoteTokenActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingActions []*SetQuoteTokenAction `protobuf:"bytes,1,rep,name=pendingActions,proto3" json:"pendingActions,omitempty"`
}

func (x *PendingSetQuoteTokenActions) Reset() {
	*x = PendingSetQuoteTokenActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingSetQuoteTokenActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingSetQuoteTokenActions) ProtoMessage() {}

func (x *PendingSetQuoteTokenActions) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingSetQuoteTokenActions.ProtoReflect.Descriptor instead.
func (*PendingSetQuoteTokenActions) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{10}
}

func (x *PendingSetQuoteTokenActions) GetPendingActions() []*SetQuoteTokenAction {
	if x != nil {
		return x.PendingActions
	}
	return nil
}

type TransferTokenOwnerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Origin []byte `protobuf:"bytes,2,opt,name=Origin,proto3" json:"Origin,omitempty"`
	New    []byte `protobuf:"bytes,3,opt,name=New,proto3" json:"New,omitempty"`
}

func (x *TransferTokenOwnerAction) Reset() {
	*x = TransferTokenOwnerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferTokenOwnerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferTokenOwnerAction) ProtoMessage() {}

func (x *TransferTokenOwnerAction) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferTokenOwnerAction.ProtoReflect.Descriptor instead.
func (*TransferTokenOwnerAction) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{11}
}

func (x *TransferTokenOwnerAction) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TransferTokenOwnerAction) GetOrigin() []byte {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *TransferTokenOwnerAction) GetNew() []byte {
	if x != nil {
		return x.New
	}
	return nil
}

type PendingTransferTokenOwnerActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingActions []*TransferTokenOwnerAction `protobuf:"bytes,1,rep,name=pendingActions,proto3" json:"pendingActions,omitempty"`
}

func (x *PendingTransferTokenOwnerActions) Reset() {
	*x = PendingTransferTokenOwnerActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingTransferTokenOwnerActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingTransferTokenOwnerActions) ProtoMessage() {}

func (x *PendingTransferTokenOwnerActions) ProtoReflect() protoreflect.Message {
	mi := &file_dex_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingTransferTokenOwnerActions.ProtoReflect.Descriptor instead.
func (*PendingTransferTokenOwnerActions) Descriptor() ([]byte, []int) {
	return file_dex_order_proto_rawDescGZIP(), []int{12}
}

func (x *PendingTransferTokenOwnerActions) GetPendingActions() []*TransferTokenOwnerAction {
	if x != nil {
		return x.PendingActions
	}
	return nil
}

var File_dex_order_proto protoreflect.FileDescriptor

var file_dex_order_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x65, 0x78, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x06, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x54, 0x61,
	0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x75, 0x79, 0x46, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x75, 0x79, 0x46, 0x65, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x38, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x38,
	0x0a, 0x08, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x4e, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x61, 0x6b, 0x65,
	0x72, 0x53, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x6b, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x46, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xad, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc0, 0x04, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x61, 0x6b,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x4d, 0x61, 0x6b, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x72, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x03, 0x0a, 0x0f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66,
	0x75, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0e, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x53, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x4e, 0x65, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65,
	0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x61, 0x0a, 0x1b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x4e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4e, 0x65,
	0x77, 0x22, 0x6b, 0x0a, 0x20, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dex_order_proto_rawDescOnce sync.Once
	file_dex_order_proto_rawDescData = file_dex_order_proto_rawDesc
)

func file_dex_order_proto_rawDescGZIP() []byte {
	file_dex_order_proto_rawDescOnce.Do(func() {
		file_dex_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_dex_order_proto_rawDescData)
	})
	return file_dex_order_proto_rawDescData
}

var file_dex_order_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_dex_order_proto_goTypes = []interface{}{
	(*Order)(nil),                            // 0: proto.Order
	(*SerialNo)(nil),                         // 1: proto.SerialNo
	(*Transaction)(nil),                      // 2: proto.Transaction
	(*TokenInfo)(nil),                        // 3: proto.TokenInfo
	(*MarketInfo)(nil),                       // 4: proto.MarketInfo
	(*NewOrderInfo)(nil),                     // 5: proto.NewOrderInfo
	(*OrderUpdateInfo)(nil),                  // 6: proto.OrderUpdateInfo
	(*NewMarketAction)(nil),                  // 7: proto.NewMarketAction
	(*PendingNewMarkets)(nil),                // 8: proto.PendingNewMarkets
	(*SetQuoteTokenAction)(nil),              // 9: proto.SetQuoteTokenAction
	(*PendingSetQuoteTokenActions)(nil),      // 10: proto.PendingSetQuoteTokenActions
	(*TransferTokenOwnerAction)(nil),         // 11: proto.TransferTokenOwnerAction
	(*PendingTransferTokenOwnerActions)(nil), // 12: proto.PendingTransferTokenOwnerActions
}
var file_dex_order_proto_depIdxs = []int32{
	0,  // 0: proto.NewOrderInfo.Order:type_name -> proto.Order
	7,  // 1: proto.PendingNewMarkets.PendingActions:type_name -> proto.NewMarketAction
	9,  // 2: proto.PendingSetQuoteTokenActions.pendingActions:type_name -> proto.SetQuoteTokenAction
	11, // 3: proto.PendingTransferTokenOwnerActions.pendingActions:type_name -> proto.TransferTokenOwnerAction
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_dex_order_proto_init() }
func file_dex_order_proto_init() {
	if File_dex_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dex_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialNo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewMarketAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingNewMarkets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetQuoteTokenAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingSetQuoteTokenActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferTokenOwnerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingTransferTokenOwnerActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dex_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dex_order_proto_goTypes,
		DependencyIndexes: file_dex_order_proto_depIdxs,
		MessageInfos:      file_dex_order_proto_msgTypes,
	}.Build()
	File_dex_order_proto = out.File
	file_dex_order_proto_rawDesc = nil
	file_dex_order_proto_goTypes = nil
	file_dex_order_proto_depIdxs = nil
}
